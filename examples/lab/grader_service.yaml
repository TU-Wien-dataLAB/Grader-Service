# Copyright (c) 2022, TU Wien
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: grader-service
  namespace: default

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grader-service
  namespace: default
rules:
  - apiGroups:
        - ""
    resources:
      - pods
      - pods/status
      - pods/logs
    verbs: ["get", "create", "update", "delete"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grader-service
subjects:
- namespace: default
  kind: ServiceAccount
  name: grader-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grader-service

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grader-service
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10G
  # storageClassName: default
  volumeMode: Filesystem

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: grader-service
data:
  grader_service_config.py: |
    from grader_service.autograding.kube.kube_grader import KubeAutogradeExecutor
    c.RequestHandlerConfig.autograde_executor_class = KubeAutogradeExecutor
    c.KubeAutogradeExecutor.kube_context = None
    c.KubeAutogradeExecutor.base_input_path = "/var/lib/grader-service/convert_in"
    c.KubeAutogradeExecutor.base_output_path = "/var/lib/grader-service/convert_out"
    c.KubeAutogradeExecutor.default_image_name = lambda l, a: "s210.dl.hpc.tuwien.ac.at/grader/grader-notebook-minimal:latest"
    c.KubeAutogradeExecutor.volume_mounts = [{"name": "data", "mountPath": "/var/lib/grader-service"}]
    c.KubeAutogradeExecutor.volumes = [{"name": "data", "persistentVolumeClaim": {"claimName": "grader-service"}}]

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grader-service
  labels:
    app: jupyterhub
    component: grader-service
    release: jupyterhub
  namespace: default
spec:
  selector:
    matchLabels:
      app: jupyterhub
      component: grader-service
      release: jupyterhub
  replicas: 1
  template:
    metadata:
      labels:
        app: jupyterhub
        component: grader-service
        release: jupyterhub
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
    spec:
      serviceAccount: grader-service
      serviceAccountName: grader-service
      containers:
      - name: grader-service
        image: s210.dl.hpc.tuwien.ac.at/grader/grader-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 4010
          name: service-port
          protocol: TCP
        volumeMounts:
          - name: data
            mountPath: /var/lib/grader-service
          - name: config
            mountPath: /etc/grader-service/grader_service_config.py
            subPath: grader_service_config.py
        env:
          - name: JUPYTERHUB_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: hub
                key: hub.services.grader.apiToken
          - name: JUPYTERHUB_API_URL
            value: 'http://hub:8081/hub/api'
          - name: GRADER_SERVICE_PORT
            value: "4010"
          - name: JUPYTERHUB_BASE_URL
            value: '/'
          - name: JUPYTERHUB_SERVICE_NAME
            value: 'grader'
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: grader-service
            readOnly: false
        - name: config
          configMap:
            defaultMode: 444
            name: grader-service
---
apiVersion: v1
kind: Service
metadata:
  name: grader-service
  namespace: default
  labels:
    app: jupyterhub
    component: grader-service
    release: jupyterhub
spec:
  ports:
  - port: 4010
    protocol: TCP
  selector:
    app: jupyterhub
    component: grader-service
    release: jupyterhub
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grader-service
  namespace: default
spec:
  egress:
  - ports:
    - port: 8081
      protocol: TCP
    to:
    - podSelector:
        matchLabels:
          app: jupyterhub
          component: hub
          release: jupyterhub
  - ports:
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 169.254.169.254/32
  ingress:
  - from:
    - podSelector:
        matchLabels:
          hub.jupyter.org/network-access-singleuser: "true"
    ports:
    - port: service-port
      protocol: TCP
  podSelector:
    matchLabels:
      app: jupyterhub
      component: grader-service
      release: jupyterhub
  policyTypes:
  - Ingress
  - Egress
