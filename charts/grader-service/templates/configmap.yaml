apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "grader-service.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "grader-service.labels" . | nindent 4 }}
data:
  grader_service_config.py: |
{{ .Values.extraConfig | indent 4 }}

    {{ if eq .Values.autogradeExecutorClass "KubeAutogradeExecutor" }}
    from grader_service.autograding.kube.kube_grader import KubeAutogradeExecutor
    c.RequestHandlerConfig.autograde_executor_class = KubeAutogradeExecutor
    {{ else }}
    from grader_service.autograding.local_grader import LocalAutogradeExecutor
    c.RequestHandlerConfig.autograde_executor_class = LocalAutogradeExecutor
    {{ end }}

    {{- if .Values.gitea.enabled }}
    from grader_service.handlers.git.gitea import GiteaServer
    c.GraderService.git_server = GiteaServer
    {{- else }}
    from grader_service.handlers.git.local import GitLocalServer
    c.GraderService.git_server = GitLocalServer
    {{- end }}
    {{- if .Values.requestHandlerConfig }}
    {{- if .Values.requestHandlerConfig.git_max_file_mb }}
    c.RequestHandlerConfig.git_max_file_size_mb = {{ .Values.requestHandlerConfig.git_max_file_mb }}
    {{- end }}    
    {{- end }}

    c.GraderExecutor.n_concurrent_tasks = {{ .Values.concurrentGradingTasks | int }}
    
    c.KubeAutogradeExecutor.kube_context = None
    
    {{- if .Values.kubeAutogradeExecutor.namespace }}
    c.KubeAutogradeExecutor.namespace = {{ .Values.kubeAutogradeExecutor.namespace | quote }}
    {{- end }}
    {{- if .Values.kubeAutogradeExecutor.resolveImageName }}
    c.KubeAutogradeExecutor.resolve_image_name = {{ .Values.kubeAutogradeExecutor.resolveImageName }}
    {{- else }}

    c.KubeAutogradeExecutor.resolve_image_name = lambda l, a: "{{ .Values.kubeAutogradeExecutor.image }}:{{ .Values.kubeAutogradeExecutor.tag | default .Chart.AppVersion }}"
    {{- end }}
    c.KubeAutogradeExecutor.volume = {"name": "data", {{- if .Values.hostpath -}}"hostPath": {"path": "{{ .Values.hostpath }}", "type": "DirectoryOrCreate"} {{- else -}} "persistentVolumeClaim": {"claimName": "{{ include "grader-service.fullname" . }}"}{{- end -}} }
    c.KubeAutogradeExecutor.extra_volumes = {{ .Values.kubeAutogradeExecutor.extraVolumes | default "[]" }}
    c.KubeAutogradeExecutor.extra_volume_mounts = {{ .Values.kubeAutogradeExecutor.extraVolumeMounts | default "[]" }}

    c.GraderService.db_url = "{{ .Values.db.url }}"
    c.GraderService.max_buffer_size = {{ .Values.requestHandlerConfig.max_buffer_size | int }}
    c.GraderService.max_body_size = {{ .Values.requestHandlerConfig.max_body_size | int }}

    c.LTISyncGrades.enable_lti_features = {{ .Values.ltiSyncGrades.enabled }}
    c.LTISyncGrades.token_url = {{ .Values.ltiSyncGrades.token_url | quote }}
    c.LTISyncGrades.client_id = {{ .Values.ltiSyncGrades.client_id | quote }}
    c.LTISyncGrades.token_private_key = {{ .Values.ltiSyncGrades.token_private_key | quote }}
    c.LTISyncGrades.resolve_lti_urls = {{ .Values.ltiSyncGrades.resolve_lti_urls }}
    c.LTISyncGrades.username_match = {{ .Values.ltiSyncGrades.username_match | quote }}

    c.GraderService.log_level = "{{ .Values.logLevel }}"

  .gitconfig: |
    [user]
      name = {{ .Values.gitConfig.gitUser }}
      email = {{ .Values.gitConfig.gitEmail }}
    [init]
      defaultBranch = main